This is from an earlier version, so some things may appear inconststant



MicroASM documentation

stuff:
	memory is 65536 bytes
	memory addresses are most significant byte first. LDA 0 6 2 10 (loads the number 6 into memory adress 522)
	the program counter is in bytes 2 0 and 2 1
       Input is in bytes 1 0 to 1 127
	output is in bytes 1 128 to 1 255
       to refer to a number, use memory address [0,num]

opcodes:
	0:
		halt, HLT, stops the program. HLT []
	1:
		load, LDA, loads from memory adress a into memory address b. LDA [a1,a2,b1,b2]
	2:
		add, ADD, adds memory address a into memory address b. ADD [a1, a2, ,b1, b2]
	3:
		subtract, SUB, subtracts memory address a from memory address b. SUB [a1, a2, ,b1, b2]
	4:
		multiply, MUL, multiplies memory address b by memory address a. MUL [a1, a2, ,b1, b2]
	5:
		divide, DIV, divides memory address b by memory address a. Uses floor to round down the output. DIV [a1, a2, ,b1, b2]
	6:
		jump, JMP, sets the program counter to memory address j. JMP [j1, j2]
	7:
		jump if equal, JIE, if memory address c is memory address d jump to mem j. JIE [j1, j2, c1,c2, d1, d1]
	8:
		jump if less than, JIL, if memory address c is less than memory address d jump to mem j. JIL [j1, j2, c1,c2, d1, d1]
	9:
		jump if greater than, JIG, if memory address c is greater than memory address d jump to mem j. JIG [j1, j2, c1,c2, d1, d1]
